define(["./shared"],(function(e){"use strict";function t(e){const o=typeof e;if("number"===o||"boolean"===o||"string"===o||null==e)return JSON.stringify(e);if(Array.isArray(e)){let o="[";for(const r of e)o+=`${t(r)},`;return`${o}]`}const r=Object.keys(e).sort();let i="{";for(let o=0;o<r.length;o++)i+=`${JSON.stringify(r[o])}:${t(e[r[o]])},`;return`${i}}`}function o(o){let r="";for(const i of e.refProperties)r+=`/${t(o[i])}`;return r}class r{constructor(e){this.keyCache={},e&&this.replace(e)}replace(e){this._layerConfigs={},this._layers={},this.update(e,[])}update(t,r){for(const o of t){this._layerConfigs[o.id]=o;const t=this._layers[o.id]=e.createStyleLayer(o);t._featureFilter=e.createFilter(t.filter),this.keyCache[o.id]&&delete this.keyCache[o.id]}for(const e of r)delete this.keyCache[e],delete this._layerConfigs[e],delete this._layers[e];this.familiesBySource={};const i=function(e,t){const r={};for(let i=0;i<e.length;i++){const n=t&&t[e[i].id]||o(e[i]);t&&(t[e[i].id]=n);let s=r[n];s||(s=r[n]=[]),s.push(e[i])}const i=[];for(const e in r)i.push(r[e]);return i}(Object.values(this._layerConfigs),this.keyCache);for(const e of i){const t=e.map((e=>this._layers[e.id])),o=t[0];if("none"===o.visibility)continue;const r=o.source||"";let i=this.familiesBySource[r];i||(i=this.familiesBySource[r]={});const n=o.sourceLayer||"_geojsonTileLayer";let s=i[n];s||(s=i[n]=[]),s.push(t)}}}class i{constructor(t){const o={},r=[];for(const e in t){const i=t[e],n=o[e]={};for(const e in i){const t=i[+e];if(!t||0===t.bitmap.width||0===t.bitmap.height)continue;const o={x:0,y:0,w:t.bitmap.width+2,h:t.bitmap.height+2};r.push(o),n[e]={rect:o,metrics:t.metrics}}}const{w:i,h:n}=e.potpack(r),s=new e.AlphaImage({width:i||1,height:n||1});for(const r in t){const i=t[r];for(const t in i){const n=i[+t];if(!n||0===n.bitmap.width||0===n.bitmap.height)continue;const a=o[r][t].rect;e.AlphaImage.copy(n.bitmap,s,{x:0,y:0},{x:a.x+1,y:a.y+1},n.bitmap)}}this.image=s,this.positions=o}}e.register("GlyphAtlas",i);class n{constructor(t){this.tileID=new e.OverscaledTileID(t.tileID.overscaledZ,t.tileID.wrap,t.tileID.canonical.z,t.tileID.canonical.x,t.tileID.canonical.y),this.uid=t.uid,this.zoom=t.zoom,this.pixelRatio=t.pixelRatio,this.tileSize=t.tileSize,this.source=t.source,this.overscaling=this.tileID.overscaleFactor(),this.showCollisionBoxes=t.showCollisionBoxes,this.collectResourceTiming=!!t.collectResourceTiming,this.returnDependencies=!!t.returnDependencies,this.promoteId=t.promoteId}parse(t,o,r,n,a){this.status="parsing",this.data=t,this.collisionBoxArray=new e.CollisionBoxArray;const l=new e.DictionaryCoder(Object.keys(t.layers).sort()),u=new e.FeatureIndex(this.tileID,this.promoteId);u.bucketLayerIDs=[];const c={},h={featureIndex:u,iconDependencies:{},patternDependencies:{},glyphDependencies:{},availableImages:r},p=o.familiesBySource[this.source];for(const o in p){const i=t.layers[o];if(!i)continue;1===i.version&&e.warnOnce(`Vector tile source "${this.source}" layer "${o}" does not use vector tile spec v2 and therefore may have some rendering errors.`);const n=l.encode(o),a=[];for(let e=0;e<i.length;e++){const t=i.feature(e),r=u.getId(t,o);a.push({feature:t,id:r,index:e,sourceLayerIndex:n})}for(const t of p[o]){const o=t[0];o.source!==this.source&&e.warnOnce(`layer.source = ${o.source} does not equal this.source = ${this.source}`),o.minzoom&&this.zoom<Math.floor(o.minzoom)||o.maxzoom&&this.zoom>=o.maxzoom||"none"!==o.visibility&&(s(t,this.zoom,r),(c[o.id]=o.createBucket({index:u.bucketLayerIDs.length,layers:t,zoom:this.zoom,pixelRatio:this.pixelRatio,overscaling:this.overscaling,collisionBoxArray:this.collisionBoxArray,sourceLayerIndex:n,sourceID:this.source})).populate(a,h,this.tileID.canonical),u.bucketLayerIDs.push(t.map((e=>e.id))))}}let f,d,g,m;const y=e.mapObject(h.glyphDependencies,(e=>Object.keys(e).map(Number)));Object.keys(y).length?n.send("getGlyphs",{uid:this.uid,stacks:y},((e,t)=>{f||(f=e,d=t,w.call(this))})):d={};const v=Object.keys(h.iconDependencies);v.length?n.send("getImages",{icons:v,source:this.source,tileID:this.tileID,type:"icons"},((e,t)=>{f||(f=e,g=t,w.call(this))})):g={};const x=Object.keys(h.patternDependencies);function w(){if(f)return a(f);if(d&&g&&m){const t=new i(d),o=new e.ImageAtlas(g,m);for(const i in c){const n=c[i];n instanceof e.SymbolBucket?(s(n.layers,this.zoom,r),e.performSymbolLayout({bucket:n,glyphMap:d,glyphPositions:t.positions,imageMap:g,imagePositions:o.iconPositions,showCollisionBoxes:this.showCollisionBoxes,canonical:this.tileID.canonical})):n.hasPattern&&(n instanceof e.LineBucket||n instanceof e.FillBucket||n instanceof e.FillExtrusionBucket)&&(s(n.layers,this.zoom,r),n.addFeatures(h,this.tileID.canonical,o.patternPositions))}this.status="done",a(null,{buckets:Object.values(c).filter((e=>!e.isEmpty())),featureIndex:u,collisionBoxArray:this.collisionBoxArray,glyphAtlasImage:t.image,imageAtlas:o,glyphMap:this.returnDependencies?d:null,iconMap:this.returnDependencies?g:null,glyphPositions:this.returnDependencies?t.positions:null})}}x.length?n.send("getImages",{icons:x,source:this.source,tileID:this.tileID,type:"patterns"},((e,t)=>{f||(f=e,m=t,w.call(this))})):m={},w.call(this)}}function s(t,o,r){const i=new e.EvaluationParameters(o);for(const e of t)e.recalculate(i,r)}function a(t,o){const r=e.getArrayBuffer(t.request,((t,r,i,n)=>{t?o(t):r&&o(null,{vectorTile:new e.vectorTile.VectorTile(new e._pbf_3_2_1_pbf(r)),rawData:r,cacheControl:i,expires:n})}));return()=>{r.cancel(),o()}}class l{constructor(e,t,o,r){this.actor=e,this.layerIndex=t,this.availableImages=o,this.loadVectorData=r||a,this.loading={},this.loaded={}}loadTile(t,o){const r=t.uid;this.loading||(this.loading={});const i=!!(t&&t.request&&t.request.collectResourceTiming)&&new e.RequestPerformance(t.request),s=this.loading[r]=new n(t);s.abort=this.loadVectorData(t,((t,n)=>{if(delete this.loading[r],t||!n)return s.status="done",this.loaded[r]=s,o(t);const a=n.rawData,l={};n.expires&&(l.expires=n.expires),n.cacheControl&&(l.cacheControl=n.cacheControl);const u={};if(i){const e=i.finish();e&&(u.resourceTiming=JSON.parse(JSON.stringify(e)))}s.vectorTile=n.vectorTile,s.parse(n.vectorTile,this.layerIndex,this.availableImages,this.actor,((t,r)=>{if(t||!r)return o(t);o(null,e.extend({rawTileData:a.slice(0)},r,l,u))})),this.loaded=this.loaded||{},this.loaded[r]=s}))}reloadTile(e,t){const o=this.loaded,r=e.uid,i=this;if(o&&o[r]){const n=o[r];n.showCollisionBoxes=e.showCollisionBoxes;const s=(e,o)=>{const r=n.reloadCallback;r&&(delete n.reloadCallback,n.parse(n.vectorTile,i.layerIndex,this.availableImages,i.actor,r)),t(e,o)};"parsing"===n.status?n.reloadCallback=s:"done"===n.status&&(n.vectorTile?n.parse(n.vectorTile,this.layerIndex,this.availableImages,this.actor,s):s())}}abortTile(e,t){const o=this.loading,r=e.uid;o&&o[r]&&o[r].abort&&(o[r].abort(),delete o[r]),t()}removeTile(e,t){const o=this.loaded,r=e.uid;o&&o[r]&&delete o[r],t()}}class u{constructor(){this.loaded={}}loadTile(t,o){const{uid:r,encoding:i,rawImageData:n}=t,s=e.isImageBitmap(n)?this.getImageData(n):n,a=new e.DEMData(r,s,i);this.loaded=this.loaded||{},this.loaded[r]=a,o(null,a)}getImageData(t){this.offscreenCanvas&&this.offscreenCanvasContext||(this.offscreenCanvas=new OffscreenCanvas(t.width,t.height),this.offscreenCanvasContext=this.offscreenCanvas.getContext("2d",{willReadFrequently:!0})),this.offscreenCanvas.width=t.width,this.offscreenCanvas.height=t.height,this.offscreenCanvasContext.drawImage(t,0,0,t.width,t.height);const o=this.offscreenCanvasContext.getImageData(-1,-1,t.width+2,t.height+2);return this.offscreenCanvasContext.clearRect(0,0,this.offscreenCanvas.width,this.offscreenCanvas.height),new e.RGBAImage({width:o.width,height:o.height},o.data)}removeTile(e){const t=this.loaded,o=e.uid;t&&t[o]&&delete t[o]}}var c=function e(t,o){var r,i=t&&t.type;if("FeatureCollection"===i)for(r=0;r<t.features.length;r++)e(t.features[r],o);else if("GeometryCollection"===i)for(r=0;r<t.geometries.length;r++)e(t.geometries[r],o);else if("Feature"===i)e(t.geometry,o);else if("Polygon"===i)h(t.coordinates,o);else if("MultiPolygon"===i)for(r=0;r<t.coordinates.length;r++)h(t.coordinates[r],o);return t};function h(e,t){if(0!==e.length){p(e[0],t);for(var o=1;o<e.length;o++)p(e[o],!t)}}function p(e,t){for(var o=0,r=0,i=0,n=e.length,s=n-1;i<n;s=i++){var a=(e[i][0]-e[s][0])*(e[s][1]+e[i][1]),l=o+a;r+=Math.abs(o)>=Math.abs(a)?o-l+a:a-l+o,o=l}o+r>=0!=!!t&&e.reverse()}const f=e.vectorTile.VectorTileFeature.prototype.toGeoJSON;class d{constructor(t){this._feature=t,this.extent=e.EXTENT,this.type=t.type,this.properties=t.tags,"id"in t&&!isNaN(t.id)&&(this.id=parseInt(t.id,10))}loadGeometry(){if(1===this._feature.type){const t=[];for(const o of this._feature.geometry)t.push([new e.pointGeometry(o[0],o[1])]);return t}{const t=[];for(const o of this._feature.geometry){const r=[];for(const t of o)r.push(new e.pointGeometry(t[0],t[1]));t.push(r)}return t}}toGeoJSON(e,t,o){return f.call(this,e,t,o)}}class g{constructor(t){this.layers={_geojsonTileLayer:this},this.name="_geojsonTileLayer",this.extent=e.EXTENT,this.length=t.length,this._features=t}feature(e){return new d(this._features[e])}}var m={exports:{}},y=e.pointGeometry,v=e.vectorTile.VectorTileFeature,x=w;function w(e,t){this.options=t||{},this.features=e,this.length=e.length}function S(e,t){this.id="number"==typeof e.id?e.id:void 0,this.type=e.type,this.rawGeometry=1===e.type?[e.geometry]:e.geometry,this.properties=e.tags,this.extent=t||4096}w.prototype.feature=function(e){return new S(this.features[e],this.options.extent)},S.prototype.loadGeometry=function(){var e=this.rawGeometry;this.geometry=[];for(var t=0;t<e.length;t++){for(var o=e[t],r=[],i=0;i<o.length;i++)r.push(new y(o[i][0],o[i][1]));this.geometry.push(r)}return this.geometry},S.prototype.bbox=function(){this.geometry||this.loadGeometry();for(var e=this.geometry,t=1/0,o=-1/0,r=1/0,i=-1/0,n=0;n<e.length;n++)for(var s=e[n],a=0;a<s.length;a++){var l=s[a];t=Math.min(t,l.x),o=Math.max(o,l.x),r=Math.min(r,l.y),i=Math.max(i,l.y)}return[t,r,o,i]},S.prototype.toGeoJSON=v.prototype.toGeoJSON;var b=e._pbf_3_2_1_pbf,I=x;function M(e){var t=new b;return function(e,t){for(var o in e.layers)t.writeMessage(3,P,e.layers[o])}(e,t),t.finish()}function P(e,t){var o;t.writeVarintField(15,e.version||1),t.writeStringField(1,e.name||""),t.writeVarintField(5,e.extent||4096);var r={keys:[],values:[],keycache:{},valuecache:{}};for(o=0;o<e.length;o++)r.feature=e.feature(o),t.writeMessage(2,k,r);var i=r.keys;for(o=0;o<i.length;o++)t.writeStringField(3,i[o]);var n=r.values;for(o=0;o<n.length;o++)t.writeMessage(4,O,n[o])}function k(e,t){var o=e.feature;void 0!==o.id&&t.writeVarintField(1,o.id),t.writeMessage(2,_,e),t.writeVarintField(3,o.type),t.writeMessage(4,D,o)}function _(e,t){var o=e.feature,r=e.keys,i=e.values,n=e.keycache,s=e.valuecache;for(var a in o.properties){var l=o.properties[a],u=n[a];if(null!==l){void 0===u&&(r.push(a),n[a]=u=r.length-1),t.writeVarint(u);var c=typeof l;"string"!==c&&"boolean"!==c&&"number"!==c&&(l=JSON.stringify(l));var h=c+":"+l,p=s[h];void 0===p&&(i.push(l),s[h]=p=i.length-1),t.writeVarint(p)}}}function T(e,t){return(t<<3)+(7&e)}function C(e){return e<<1^e>>31}function D(e,t){for(var o=e.loadGeometry(),r=e.type,i=0,n=0,s=o.length,a=0;a<s;a++){var l=o[a],u=1;1===r&&(u=l.length),t.writeVarint(T(1,u));for(var c=3===r?l.length-1:l.length,h=0;h<c;h++){1===h&&1!==r&&t.writeVarint(T(2,c-1));var p=l[h].x-i,f=l[h].y-n;t.writeVarint(C(p)),t.writeVarint(C(f)),i+=p,n+=f}3===r&&t.writeVarint(T(7,1))}}function O(e,t){var o=typeof e;"string"===o?t.writeStringField(1,e):"boolean"===o?t.writeBooleanField(7,e):"number"===o&&(e%1!=0?t.writeDoubleField(3,e):e<0?t.writeSVarintField(6,e):t.writeVarintField(5,e))}m.exports=M,m.exports.fromVectorTileJs=M,m.exports.fromGeojsonVt=function(e,t){t=t||{};var o={};for(var r in e)o[r]=new I(e[r].features,t),o[r].name=r,o[r].version=t.version,o[r].extent=t.extent;return M({layers:o})},m.exports.GeoJSONWrapper=I;const L={minZoom:0,maxZoom:16,minPoints:2,radius:40,extent:512,nodeSize:64,log:!1,generateId:!1,reduce:null,map:e=>e},z=Math.fround||(F=new Float32Array(1),e=>(F[0]=+e,F[0]));var F;class E{constructor(e){this.options=Y(Object.create(L),e),this.trees=new Array(this.options.maxZoom+1)}load(t){const{log:o,minZoom:r,maxZoom:i,nodeSize:n}=this.options;o&&console.time("total time");const s=`prepare ${t.length} points`;o&&console.time(s),this.points=t;let a=[];for(let e=0;e<t.length;e++)t[e].geometry&&a.push(A(t[e],e));this.trees[i+1]=new e.KDBush(a,R,V,n,Float32Array),o&&console.timeEnd(s);for(let t=i;t>=r;t--){const r=+Date.now();a=this._cluster(a,t),this.trees[t]=new e.KDBush(a,R,V,n,Float32Array),o&&console.log("z%d: %d clusters in %dms",t,a.length,+Date.now()-r)}return o&&console.timeEnd("total time"),this}getClusters(e,t){let o=((e[0]+180)%360+360)%360-180;const r=Math.max(-90,Math.min(90,e[1]));let i=180===e[2]?180:((e[2]+180)%360+360)%360-180;const n=Math.max(-90,Math.min(90,e[3]));if(e[2]-e[0]>=360)o=-180,i=180;else if(o>i){const e=this.getClusters([o,r,180,n],t),s=this.getClusters([-180,r,i,n],t);return e.concat(s)}const s=this.trees[this._limitZoom(t)],a=s.range(J(o),Z(n),J(i),Z(r)),l=[];for(const e of a){const t=s.points[e];l.push(t.numPoints?B(t):this.points[t.index])}return l}getChildren(e){const t=this._getOriginId(e),o=this._getOriginZoom(e),r="No cluster with the specified id.",i=this.trees[o];if(!i)throw new Error(r);const n=i.points[t];if(!n)throw new Error(r);const s=this.options.radius/(this.options.extent*Math.pow(2,o-1)),a=i.within(n.x,n.y,s),l=[];for(const t of a){const o=i.points[t];o.parentId===e&&l.push(o.numPoints?B(o):this.points[o.index])}if(0===l.length)throw new Error(r);return l}getLeaves(e,t,o){const r=[];return this._appendLeaves(r,e,t=t||10,o=o||0,0),r}getTile(e,t,o){const r=this.trees[this._limitZoom(e)],i=Math.pow(2,e),{extent:n,radius:s}=this.options,a=s/n,l=(o-a)/i,u=(o+1+a)/i,c={features:[]};return this._addTileFeatures(r.range((t-a)/i,l,(t+1+a)/i,u),r.points,t,o,i,c),0===t&&this._addTileFeatures(r.range(1-a/i,l,1,u),r.points,i,o,i,c),t===i-1&&this._addTileFeatures(r.range(0,l,a/i,u),r.points,-1,o,i,c),c.features.length?c:null}getClusterExpansionZoom(e){let t=this._getOriginZoom(e)-1;for(;t<=this.options.maxZoom;){const o=this.getChildren(e);if(t++,1!==o.length)break;e=o[0].properties.cluster_id}return t}_appendLeaves(e,t,o,r,i){const n=this.getChildren(t);for(const t of n){const n=t.properties;if(n&&n.cluster?i+n.point_count<=r?i+=n.point_count:i=this._appendLeaves(e,n.cluster_id,o,r,i):i<r?i++:e.push(t),e.length===o)break}return i}_addTileFeatures(e,t,o,r,i,n){for(const s of e){const e=t[s],a=e.numPoints;let l,u,c;if(a)l=G(e),u=e.x,c=e.y;else{const t=this.points[e.index];l=t.properties,u=J(t.geometry.coordinates[0]),c=Z(t.geometry.coordinates[1])}const h={type:1,geometry:[[Math.round(this.options.extent*(u*i-o)),Math.round(this.options.extent*(c*i-r))]],tags:l};let p;a?p=e.id:this.options.generateId?p=e.index:this.points[e.index].id&&(p=this.points[e.index].id),void 0!==p&&(h.id=p),n.features.push(h)}}_limitZoom(e){return Math.max(this.options.minZoom,Math.min(Math.floor(+e),this.options.maxZoom+1))}_cluster(e,t){const o=[],{radius:r,extent:i,reduce:n,minPoints:s}=this.options,a=r/(i*Math.pow(2,t));for(let r=0;r<e.length;r++){const i=e[r];if(i.zoom<=t)continue;i.zoom=t;const l=this.trees[t+1],u=l.within(i.x,i.y,a),c=i.numPoints||1;let h=c;for(const e of u){const o=l.points[e];o.zoom>t&&(h+=o.numPoints||1)}if(h>c&&h>=s){let e=i.x*c,s=i.y*c,a=n&&c>1?this._map(i,!0):null;const p=(r<<5)+(t+1)+this.points.length;for(const o of u){const r=l.points[o];if(r.zoom<=t)continue;r.zoom=t;const u=r.numPoints||1;e+=r.x*u,s+=r.y*u,r.parentId=p,n&&(a||(a=this._map(i,!0)),n(a,this._map(r)))}i.parentId=p,o.push(N(e/h,s/h,p,h,a))}else if(o.push(i),h>1)for(const e of u){const r=l.points[e];r.zoom<=t||(r.zoom=t,o.push(r))}}return o}_getOriginId(e){return e-this.points.length>>5}_getOriginZoom(e){return(e-this.points.length)%32}_map(e,t){if(e.numPoints)return t?Y({},e.properties):e.properties;const o=this.points[e.index].properties,r=this.options.map(o);return t&&r===o?Y({},r):r}}function N(e,t,o,r,i){return{x:z(e),y:z(t),zoom:1/0,id:o,parentId:-1,numPoints:r,properties:i}}function A(e,t){const[o,r]=e.geometry.coordinates;return{x:z(J(o)),y:z(Z(r)),zoom:1/0,index:t,parentId:-1}}function B(e){return{type:"Feature",id:e.id,properties:G(e),geometry:{type:"Point",coordinates:[(t=e.x,360*(t-.5)),j(e.y)]}};var t}function G(e){const t=e.numPoints,o=t>=1e4?`${Math.round(t/1e3)}k`:t>=1e3?Math.round(t/100)/10+"k":t;return Y(Y({},e.properties),{cluster:!0,cluster_id:e.id,point_count:t,point_count_abbreviated:o})}function J(e){return e/360+.5}function Z(e){const t=Math.sin(e*Math.PI/180),o=.5-.25*Math.log((1+t)/(1-t))/Math.PI;return o<0?0:o>1?1:o}function j(e){const t=(180-360*e)*Math.PI/180;return 360*Math.atan(Math.exp(t))/Math.PI-90}function Y(e,t){for(const o in t)e[o]=t[o];return e}function R(e){return e.x}function V(e){return e.y}var X={exports:{}};X.exports=function(){function e(o,r,i,n){for(var s,a=n,l=i-r>>1,u=i-r,c=o[r],h=o[r+1],p=o[i],f=o[i+1],d=r+3;d<i;d+=3){var g=t(o[d],o[d+1],c,h,p,f);if(g>a)s=d,a=g;else if(g===a){var m=Math.abs(d-l);m<u&&(s=d,u=m)}}a>n&&(s-r>3&&e(o,r,s,n),o[s+2]=a,i-s>3&&e(o,s,i,n))}function t(e,t,o,r,i,n){var s=i-o,a=n-r;if(0!==s||0!==a){var l=((e-o)*s+(t-r)*a)/(s*s+a*a);l>1?(o=i,r=n):l>0&&(o+=s*l,r+=a*l)}return(s=e-o)*s+(a=t-r)*a}function o(e,t,o,i){var n={id:void 0===e?null:e,type:t,geometry:o,tags:i,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0};return function(e){var t=e.geometry,o=e.type;if("Point"===o||"MultiPoint"===o||"LineString"===o)r(e,t);else if("Polygon"===o||"MultiLineString"===o)for(var i=0;i<t.length;i++)r(e,t[i]);else if("MultiPolygon"===o)for(i=0;i<t.length;i++)for(var n=0;n<t[i].length;n++)r(e,t[i][n])}(n),n}function r(e,t){for(var o=0;o<t.length;o+=3)e.minX=Math.min(e.minX,t[o]),e.minY=Math.min(e.minY,t[o+1]),e.maxX=Math.max(e.maxX,t[o]),e.maxY=Math.max(e.maxY,t[o+1])}function i(e,t,r,l){if(t.geometry){var u=t.geometry.coordinates,c=t.geometry.type,h=Math.pow(r.tolerance/((1<<r.maxZoom)*r.extent),2),p=[],f=t.id;if(r.promoteId?f=t.properties[r.promoteId]:r.generateId&&(f=l||0),"Point"===c)n(u,p);else if("MultiPoint"===c)for(var d=0;d<u.length;d++)n(u[d],p);else if("LineString"===c)s(u,p,h,!1);else if("MultiLineString"===c){if(r.lineMetrics){for(d=0;d<u.length;d++)s(u[d],p=[],h,!1),e.push(o(f,"LineString",p,t.properties));return}a(u,p,h,!1)}else if("Polygon"===c)a(u,p,h,!0);else{if("MultiPolygon"!==c){if("GeometryCollection"===c){for(d=0;d<t.geometry.geometries.length;d++)i(e,{id:f,geometry:t.geometry.geometries[d],properties:t.properties},r,l);return}throw new Error("Input data is not a valid GeoJSON object.")}for(d=0;d<u.length;d++){var g=[];a(u[d],g,h,!0),p.push(g)}}e.push(o(f,c,p,t.properties))}}function n(e,t){t.push(l(e[0])),t.push(u(e[1])),t.push(0)}function s(t,o,r,i){for(var n,s,a=0,c=0;c<t.length;c++){var h=l(t[c][0]),p=u(t[c][1]);o.push(h),o.push(p),o.push(0),c>0&&(a+=i?(n*p-h*s)/2:Math.sqrt(Math.pow(h-n,2)+Math.pow(p-s,2))),n=h,s=p}var f=o.length-3;o[2]=1,e(o,0,f,r),o[f+2]=1,o.size=Math.abs(a),o.start=0,o.end=o.size}function a(e,t,o,r){for(var i=0;i<e.length;i++){var n=[];s(e[i],n,o,r),t.push(n)}}function l(e){return e/360+.5}function u(e){var t=Math.sin(e*Math.PI/180),o=.5-.25*Math.log((1+t)/(1-t))/Math.PI;return o<0?0:o>1?1:o}function c(e,t,r,i,n,s,a,l){if(i/=t,s>=(r/=t)&&a<i)return e;if(a<r||s>=i)return null;for(var u=[],c=0;c<e.length;c++){var f=e[c],g=f.geometry,m=f.type,y=0===n?f.minX:f.minY,v=0===n?f.maxX:f.maxY;if(y>=r&&v<i)u.push(f);else if(!(v<r||y>=i)){var x=[];if("Point"===m||"MultiPoint"===m)h(g,x,r,i,n);else if("LineString"===m)p(g,x,r,i,n,!1,l.lineMetrics);else if("MultiLineString"===m)d(g,x,r,i,n,!1);else if("Polygon"===m)d(g,x,r,i,n,!0);else if("MultiPolygon"===m)for(var w=0;w<g.length;w++){var S=[];d(g[w],S,r,i,n,!0),S.length&&x.push(S)}if(x.length){if(l.lineMetrics&&"LineString"===m){for(w=0;w<x.length;w++)u.push(o(f.id,m,x[w],f.tags));continue}"LineString"!==m&&"MultiLineString"!==m||(1===x.length?(m="LineString",x=x[0]):m="MultiLineString"),"Point"!==m&&"MultiPoint"!==m||(m=3===x.length?"Point":"MultiPoint"),u.push(o(f.id,m,x,f.tags))}}}return u.length?u:null}function h(e,t,o,r,i){for(var n=0;n<e.length;n+=3){var s=e[n+i];s>=o&&s<=r&&(t.push(e[n]),t.push(e[n+1]),t.push(e[n+2]))}}function p(e,t,o,r,i,n,s){for(var a,l,u=f(e),c=0===i?m:y,h=e.start,p=0;p<e.length-3;p+=3){var d=e[p],v=e[p+1],x=e[p+2],w=e[p+3],S=e[p+4],b=0===i?d:v,I=0===i?w:S,M=!1;s&&(a=Math.sqrt(Math.pow(d-w,2)+Math.pow(v-S,2))),b<o?I>o&&(l=c(u,d,v,w,S,o),s&&(u.start=h+a*l)):b>r?I<r&&(l=c(u,d,v,w,S,r),s&&(u.start=h+a*l)):g(u,d,v,x),I<o&&b>=o&&(l=c(u,d,v,w,S,o),M=!0),I>r&&b<=r&&(l=c(u,d,v,w,S,r),M=!0),!n&&M&&(s&&(u.end=h+a*l),t.push(u),u=f(e)),s&&(h+=a)}var P=e.length-3;d=e[P],v=e[P+1],x=e[P+2],(b=0===i?d:v)>=o&&b<=r&&g(u,d,v,x),P=u.length-3,n&&P>=3&&(u[P]!==u[0]||u[P+1]!==u[1])&&g(u,u[0],u[1],u[2]),u.length&&t.push(u)}function f(e){var t=[];return t.size=e.size,t.start=e.start,t.end=e.end,t}function d(e,t,o,r,i,n){for(var s=0;s<e.length;s++)p(e[s],t,o,r,i,n,!1)}function g(e,t,o,r){e.push(t),e.push(o),e.push(r)}function m(e,t,o,r,i,n){var s=(n-t)/(r-t);return e.push(n),e.push(o+(i-o)*s),e.push(1),s}function y(e,t,o,r,i,n){var s=(n-o)/(i-o);return e.push(t+(r-t)*s),e.push(n),e.push(1),s}function v(e,t){for(var r=[],i=0;i<e.length;i++){var n,s=e[i],a=s.type;if("Point"===a||"MultiPoint"===a||"LineString"===a)n=x(s.geometry,t);else if("MultiLineString"===a||"Polygon"===a){n=[];for(var l=0;l<s.geometry.length;l++)n.push(x(s.geometry[l],t))}else if("MultiPolygon"===a)for(n=[],l=0;l<s.geometry.length;l++){for(var u=[],c=0;c<s.geometry[l].length;c++)u.push(x(s.geometry[l][c],t));n.push(u)}r.push(o(s.id,a,n,s.tags))}return r}function x(e,t){var o=[];o.size=e.size,void 0!==e.start&&(o.start=e.start,o.end=e.end);for(var r=0;r<e.length;r+=3)o.push(e[r]+t,e[r+1],e[r+2]);return o}function w(e,t){if(e.transformed)return e;var o,r,i,n=1<<e.z,s=e.x,a=e.y;for(o=0;o<e.features.length;o++){var l=e.features[o],u=l.geometry,c=l.type;if(l.geometry=[],1===c)for(r=0;r<u.length;r+=2)l.geometry.push(S(u[r],u[r+1],t,n,s,a));else for(r=0;r<u.length;r++){var h=[];for(i=0;i<u[r].length;i+=2)h.push(S(u[r][i],u[r][i+1],t,n,s,a));l.geometry.push(h)}}return e.transformed=!0,e}function S(e,t,o,r,i,n){return[Math.round(o*(e*r-i)),Math.round(o*(t*r-n))]}function b(e,t,o,r,i){for(var n=t===i.maxZoom?0:i.tolerance/((1<<t)*i.extent),s={features:[],numPoints:0,numSimplified:0,numFeatures:0,source:null,x:o,y:r,z:t,transformed:!1,minX:2,minY:1,maxX:-1,maxY:0},a=0;a<e.length;a++){s.numFeatures++,I(s,e[a],n,i);var l=e[a].minX,u=e[a].minY,c=e[a].maxX,h=e[a].maxY;l<s.minX&&(s.minX=l),u<s.minY&&(s.minY=u),c>s.maxX&&(s.maxX=c),h>s.maxY&&(s.maxY=h)}return s}function I(e,t,o,r){var i=t.geometry,n=t.type,s=[];if("Point"===n||"MultiPoint"===n)for(var a=0;a<i.length;a+=3)s.push(i[a]),s.push(i[a+1]),e.numPoints++,e.numSimplified++;else if("LineString"===n)M(s,i,e,o,!1,!1);else if("MultiLineString"===n||"Polygon"===n)for(a=0;a<i.length;a++)M(s,i[a],e,o,"Polygon"===n,0===a);else if("MultiPolygon"===n)for(var l=0;l<i.length;l++){var u=i[l];for(a=0;a<u.length;a++)M(s,u[a],e,o,!0,0===a)}if(s.length){var c=t.tags||null;if("LineString"===n&&r.lineMetrics){for(var h in c={},t.tags)c[h]=t.tags[h];c.mapbox_clip_start=i.start/i.size,c.mapbox_clip_end=i.end/i.size}var p={geometry:s,type:"Polygon"===n||"MultiPolygon"===n?3:"LineString"===n||"MultiLineString"===n?2:1,tags:c};null!==t.id&&(p.id=t.id),e.features.push(p)}}function M(e,t,o,r,i,n){var s=r*r;if(r>0&&t.size<(i?s:r))o.numPoints+=t.length/3;else{for(var a=[],l=0;l<t.length;l+=3)(0===r||t[l+2]>s)&&(o.numSimplified++,a.push(t[l]),a.push(t[l+1])),o.numPoints++;i&&function(e,t){for(var o=0,r=0,i=e.length,n=i-2;r<i;n=r,r+=2)o+=(e[r]-e[n])*(e[r+1]+e[n+1]);if(o>0===t)for(r=0,i=e.length;r<i/2;r+=2){var s=e[r],a=e[r+1];e[r]=e[i-2-r],e[r+1]=e[i-1-r],e[i-2-r]=s,e[i-1-r]=a}}(a,n),e.push(a)}}function P(e,t){var o=(t=this.options=function(e,t){for(var o in t)e[o]=t[o];return e}(Object.create(this.options),t)).debug;if(o&&console.time("preprocess data"),t.maxZoom<0||t.maxZoom>24)throw new Error("maxZoom should be in the 0-24 range");if(t.promoteId&&t.generateId)throw new Error("promoteId and generateId cannot be used together.");var r=function(e,t){var o=[];if("FeatureCollection"===e.type)for(var r=0;r<e.features.length;r++)i(o,e.features[r],t,r);else i(o,"Feature"===e.type?e:{geometry:e},t);return o}(e,t);this.tiles={},this.tileCoords=[],o&&(console.timeEnd("preprocess data"),console.log("index: maxZoom: %d, maxPoints: %d",t.indexMaxZoom,t.indexMaxPoints),console.time("generate tiles"),this.stats={},this.total=0),(r=function(e,t){var o=t.buffer/t.extent,r=e,i=c(e,1,-1-o,o,0,-1,2,t),n=c(e,1,1-o,2+o,0,-1,2,t);return(i||n)&&(r=c(e,1,-o,1+o,0,-1,2,t)||[],i&&(r=v(i,1).concat(r)),n&&(r=r.concat(v(n,-1)))),r}(r,t)).length&&this.splitTile(r,0,0,0),o&&(r.length&&console.log("features: %d, points: %d",this.tiles[0].numFeatures,this.tiles[0].numPoints),console.timeEnd("generate tiles"),console.log("tiles generated:",this.total,JSON.stringify(this.stats)))}function k(e,t,o){return 32*((1<<e)*o+t)+e}return P.prototype.options={maxZoom:14,indexMaxZoom:5,indexMaxPoints:1e5,tolerance:3,extent:4096,buffer:64,lineMetrics:!1,promoteId:null,generateId:!1,debug:0},P.prototype.splitTile=function(e,t,o,r,i,n,s){for(var a=[e,t,o,r],l=this.options,u=l.debug;a.length;){r=a.pop(),o=a.pop(),t=a.pop(),e=a.pop();var h=1<<t,p=k(t,o,r),f=this.tiles[p];if(!f&&(u>1&&console.time("creation"),f=this.tiles[p]=b(e,t,o,r,l),this.tileCoords.push({z:t,x:o,y:r}),u)){u>1&&(console.log("tile z%d-%d-%d (features: %d, points: %d, simplified: %d)",t,o,r,f.numFeatures,f.numPoints,f.numSimplified),console.timeEnd("creation"));var d="z"+t;this.stats[d]=(this.stats[d]||0)+1,this.total++}if(f.source=e,i){if(t===l.maxZoom||t===i)continue;var g=1<<i-t;if(o!==Math.floor(n/g)||r!==Math.floor(s/g))continue}else if(t===l.indexMaxZoom||f.numPoints<=l.indexMaxPoints)continue;if(f.source=null,0!==e.length){u>1&&console.time("clipping");var m,y,v,x,w,S,I=.5*l.buffer/l.extent,M=.5-I,P=.5+I,_=1+I;m=y=v=x=null,w=c(e,h,o-I,o+P,0,f.minX,f.maxX,l),S=c(e,h,o+M,o+_,0,f.minX,f.maxX,l),e=null,w&&(m=c(w,h,r-I,r+P,1,f.minY,f.maxY,l),y=c(w,h,r+M,r+_,1,f.minY,f.maxY,l),w=null),S&&(v=c(S,h,r-I,r+P,1,f.minY,f.maxY,l),x=c(S,h,r+M,r+_,1,f.minY,f.maxY,l),S=null),u>1&&console.timeEnd("clipping"),a.push(m||[],t+1,2*o,2*r),a.push(y||[],t+1,2*o,2*r+1),a.push(v||[],t+1,2*o+1,2*r),a.push(x||[],t+1,2*o+1,2*r+1)}}},P.prototype.getTile=function(e,t,o){var r=this.options,i=r.extent,n=r.debug;if(e<0||e>24)return null;var s=1<<e,a=k(e,t=(t%s+s)%s,o);if(this.tiles[a])return w(this.tiles[a],i);n>1&&console.log("drilling down to z%d-%d-%d",e,t,o);for(var l,u=e,c=t,h=o;!l&&u>0;)u--,c=Math.floor(c/2),h=Math.floor(h/2),l=this.tiles[k(u,c,h)];return l&&l.source?(n>1&&console.log("found parent tile z%d-%d-%d",u,c,h),n>1&&console.time("drilling down"),this.splitTile(l.source,u,c,h,e,t,o),n>1&&console.timeEnd("drilling down"),this.tiles[a]?w(this.tiles[a],i):null):null},function(e,t){return new P(e,t)}}();var $=X.exports;function W(e,t){return t?e.properties[t]:e.id}function q(e,t){if(null==e)return!0;if("Feature"===e.type)return null!=W(e,t);if("FeatureCollection"===e.type){const o=new Set;for(const r of e.features){const e=W(r,t);if(null==e)return!1;if(o.has(e))return!1;o.add(e)}return!0}return!1}function U(e,t){const o=new Map;if(null==e);else if("Feature"===e.type)o.set(W(e,t),e);else for(const r of e.features)o.set(W(r,t),r);return o}function K(e,t){const o=e.tileID.canonical;if(!this._geoJSONIndex)return t(null,null);const r=this._geoJSONIndex.getTile(o.z,o.x,o.y);if(!r)return t(null,null);const i=new g(r.features);let n=m.exports(i);0===n.byteOffset&&n.byteLength===n.buffer.byteLength||(n=new Uint8Array(n)),t(null,{vectorTile:i,rawData:n.buffer})}class H extends l{constructor(t,o,r,i){super(t,o,r,K),this._dataUpdateable=new Map,this.loadGeoJSON=(t,o)=>{const{promoteId:r}=t;if(t.request)return e.getJSON(t.request,((e,t,i,n)=>{this._dataUpdateable=q(t,r)?U(t,r):void 0,o(e,t,i,n)}));if("string"==typeof t.data)try{const e=JSON.parse(t.data);this._dataUpdateable=q(e,r)?U(e,r):void 0,o(null,e)}catch(e){o(new Error(`Input data given to '${t.source}' is not a valid GeoJSON object.`))}else t.dataDiff?this._dataUpdateable?(function(e,t,o){var r,i,n,s;if(t.removeAll&&e.clear(),t.remove)for(const o of t.remove)e.delete(o);if(t.add)for(const r of t.add){const t=W(r,o);null!=t&&e.set(t,r)}if(t.update)for(const o of t.update){let t=e.get(o.id);if(null==t)continue;const a=!o.removeAllProperties&&((null===(r=o.removeProperties)||void 0===r?void 0:r.length)>0||(null===(i=o.addOrUpdateProperties)||void 0===i?void 0:i.length)>0);if((o.newGeometry||o.removeAllProperties||a)&&(t={...t},e.set(o.id,t),a&&(t.properties={...t.properties})),o.newGeometry&&(t.geometry=o.newGeometry),o.removeAllProperties)t.properties={};else if((null===(n=o.removeProperties)||void 0===n?void 0:n.length)>0)for(const e of o.removeProperties)Object.prototype.hasOwnProperty.call(t.properties,e)&&delete t.properties[e];if((null===(s=o.addOrUpdateProperties)||void 0===s?void 0:s.length)>0)for(const{key:e,value:r}of o.addOrUpdateProperties)t.properties[e]=r}}(this._dataUpdateable,t.dataDiff,r),o(null,{type:"FeatureCollection",features:Array.from(this._dataUpdateable.values())})):o(new Error(`Cannot update existing geojson data in ${t.source}`)):o(new Error(`Input data given to '${t.source}' is not a valid GeoJSON object.`));return{cancel:()=>{}}},i&&(this.loadGeoJSON=i)}loadData(t,o){var r;null===(r=this._pendingRequest)||void 0===r||r.cancel(),this._pendingCallback&&this._pendingCallback(null,{abandoned:!0});const i=!!(t&&t.request&&t.request.collectResourceTiming)&&new e.RequestPerformance(t.request);this._pendingCallback=o,this._pendingRequest=this.loadGeoJSON(t,((r,n)=>{if(delete this._pendingCallback,delete this._pendingRequest,r||!n)return o(r);if("object"!=typeof n)return o(new Error(`Input data given to '${t.source}' is not a valid GeoJSON object.`));{c(n,!0);try{if(t.filter){const o=e.createExpression(t.filter,{type:"boolean","property-type":"data-driven",overridable:!1,transition:!1});if("error"===o.result)throw new Error(o.value.map((e=>`${e.key}: ${e.message}`)).join(", "));const r=n.features.filter((e=>o.value.evaluate({zoom:0},e)));n={type:"FeatureCollection",features:r}}this._geoJSONIndex=t.cluster?new E(function({superclusterOptions:t,clusterProperties:o}){if(!o||!t)return t;const r={},i={},n={accumulated:null,zoom:0},s={properties:null},a=Object.keys(o);for(const t of a){const[n,s]=o[t],a=e.createExpression(s),l=e.createExpression("string"==typeof n?[n,["accumulated"],["get",t]]:n);r[t]=a.value,i[t]=l.value}return t.map=e=>{s.properties=e;const t={};for(const e of a)t[e]=r[e].evaluate(n,s);return t},t.reduce=(e,t)=>{s.properties=t;for(const t of a)n.accumulated=e[t],e[t]=i[t].evaluate(n,s)},t}(t)).load(n.features):$(n,t.geojsonVtOptions)}catch(r){return o(r)}this.loaded={};const s={};if(i){const e=i.finish();e&&(s.resourceTiming={},s.resourceTiming[t.source]=JSON.parse(JSON.stringify(e)))}o(null,s)}}))}reloadTile(e,t){const o=this.loaded;return o&&o[e.uid]?super.reloadTile(e,t):this.loadTile(e,t)}removeSource(e,t){this._pendingCallback&&this._pendingCallback(null,{abandoned:!0}),t()}getClusterExpansionZoom(e,t){try{t(null,this._geoJSONIndex.getClusterExpansionZoom(e.clusterId))}catch(e){t(e)}}getClusterChildren(e,t){try{t(null,this._geoJSONIndex.getChildren(e.clusterId))}catch(e){t(e)}}getClusterLeaves(e,t){try{t(null,this._geoJSONIndex.getLeaves(e.clusterId,e.limit,e.offset))}catch(e){t(e)}}}class Q{constructor(t){this.self=t,this.actor=new e.Actor(t,this),this.layerIndexes={},this.availableImages={},this.workerSourceTypes={vector:l,geojson:H},this.workerSources={},this.demWorkerSources={},this.self.registerWorkerSource=(e,t)=>{if(this.workerSourceTypes[e])throw new Error(`Worker source with name "${e}" already registered.`);this.workerSourceTypes[e]=t},this.self.registerRTLTextPlugin=t=>{if(e.plugin.isParsed())throw new Error("RTL text plugin already registered.");e.plugin.applyArabicShaping=t.applyArabicShaping,e.plugin.processBidirectionalText=t.processBidirectionalText,e.plugin.processStyledBidirectionalText=t.processStyledBidirectionalText}}setReferrer(e,t){this.referrer=t}setImages(e,t,o){this.availableImages[e]=t;for(const o in this.workerSources[e]){const r=this.workerSources[e][o];for(const e in r)r[e].availableImages=t}o()}setLayers(e,t,o){this.getLayerIndex(e).replace(t),o()}updateLayers(e,t,o){this.getLayerIndex(e).update(t.layers,t.removedIds),o()}loadTile(e,t,o){this.getWorkerSource(e,t.type,t.source).loadTile(t,o)}loadDEMTile(e,t,o){this.getDEMWorkerSource(e,t.source).loadTile(t,o)}reloadTile(e,t,o){this.getWorkerSource(e,t.type,t.source).reloadTile(t,o)}abortTile(e,t,o){this.getWorkerSource(e,t.type,t.source).abortTile(t,o)}removeTile(e,t,o){this.getWorkerSource(e,t.type,t.source).removeTile(t,o)}removeDEMTile(e,t){this.getDEMWorkerSource(e,t.source).removeTile(t)}removeSource(e,t,o){if(!this.workerSources[e]||!this.workerSources[e][t.type]||!this.workerSources[e][t.type][t.source])return;const r=this.workerSources[e][t.type][t.source];delete this.workerSources[e][t.type][t.source],void 0!==r.removeSource?r.removeSource(t,o):o()}loadWorkerSource(e,t,o){try{this.self.importScripts(t.url),o()}catch(e){o(e.toString())}}syncRTLPluginState(t,o,r){try{e.plugin.setState(o);const t=e.plugin.getPluginURL();if(e.plugin.isLoaded()&&!e.plugin.isParsed()&&null!=t){this.self.importScripts(t);const o=e.plugin.isParsed();r(o?void 0:new Error(`RTL Text Plugin failed to import scripts from ${t}`),o)}}catch(e){r(e.toString())}}getAvailableImages(e){let t=this.availableImages[e];return t||(t=[]),t}getLayerIndex(e){let t=this.layerIndexes[e];return t||(t=this.layerIndexes[e]=new r),t}getWorkerSource(e,t,o){if(this.workerSources[e]||(this.workerSources[e]={}),this.workerSources[e][t]||(this.workerSources[e][t]={}),!this.workerSources[e][t][o]){const r={send:(t,o,r)=>{this.actor.send(t,o,r,e)}};this.workerSources[e][t][o]=new this.workerSourceTypes[t](r,this.getLayerIndex(e),this.getAvailableImages(e))}return this.workerSources[e][t][o]}getDEMWorkerSource(e,t){return this.demWorkerSources[e]||(this.demWorkerSources[e]={}),this.demWorkerSources[e][t]||(this.demWorkerSources[e][t]=new u),this.demWorkerSources[e][t]}enforceCacheSizeLimit(t,o){e.enforceCacheSizeLimit(o)}}return e.isWorker()&&(self.worker=new Q(self)),Q}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
